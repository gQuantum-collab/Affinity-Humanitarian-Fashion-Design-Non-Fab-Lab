#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Enforce sovereign IP marks
python3 ops/ipmarks/runner.py

# Abort if runner made changes
if ! git diff --quiet; then
  echo "❌ Sovereign marks runner made changes. Commit them before retrying."
  exit 1
fi

echo "✅ IP marks enforced"

# Block inline styles in JSX/TSX
if git diff --cached --name-only | grep -E '\.(tsx|jsx)$' | xargs grep -n "style=\"" ; then
  echo "❌ Inline style detected in JSX/TSX. Use className/Tailwind instead."
  exit 1
fi

echo "✅ No inline style attributes found"

# Create table
create table if not exists public.notes (
  id bigint primary key generated always as identity,
  title text not null
);

# Insert sample data
insert into public.notes (title)
values
  ('Today I created a Supabase project.'),
  ('I added some data and queried it from Next.js.'),
  ('It was awesome!');

# Enable row level security and allow anonymous SELECT
alter table public.notes enable row level security;

create policy if not exists anon_select_notes
  on public.notes
  for select
  to anon
  using (true);

import { createClient } from '@supabase/supabase-js'

if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {
  throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL')
}
if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
  throw new Error('Missing SUPABASE_SERVICE_ROLE_KEY')
}

export const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  {
    auth: { persistSession: false },
  }
)

import { NextRequest, NextResponse } from 'next/server'
import { supabaseAdmin } from '@/lib/supabaseAdmin'

export async function GET(req: NextRequest) {
  const token = req.headers.get('x-admin-token')
  if (token !== process.env.ADMIN_API_TOKEN) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  const { data, error } = await supabaseAdmin
    .from('notes')
    .select('*')
    .order('id')

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 })
  }
  return NextResponse.json(data)
}

export async function POST(req: NextRequest) {
  const token = req.headers.get('x-admin-token')
  if (token !== process.env.ADMIN_API_TOKEN) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  const body = await req.json()
  const { title, content } = body

  const { data, error } = await supabaseAdmin
    .from('notes')
    .insert([{ title, content }])
    .select()

  if (error) {
    return NextResponse.json({ error: error.message }, { status: 500 })
  }
  return NextResponse.json(data, { status: 201 })
}

# Supabase (public)
NEXT_PUBLIC_SUPABASE_URL=https://xxx.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key

# Supabase (server)
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# Admin API token for protected routes (server-only)
ADMIN_API_TOKEN=super-secret-admin-token

## Supabase Usage

- Client components use `@/lib/supabase` (anon key, subject to RLS).
- API routes and server components use `@/lib/supabaseAdmin` (service role key). Never import `supabaseAdmin` into client-side code.
- Protected API routes require `x-admin-token` in headers.

Example:
```bash
curl -H "x-admin-token: $ADMIN_API_TOKEN" \
     https://yourdomain.com/api/notes
```

1. DNS propagation
• If you bought gtekaffinity.io through Vercel, DNS + SSL should be auto-managed.
• If you registered it elsewhere, you’ll need to update nameservers or add the correct A/ALIAS/CNAME records.
2. TLS certificate
• Vercel will auto-issue Let’s Encrypt once DNS resolves correctly.
• You can test by hitting https://gtekaffinity.io — if TLS fails, DNS still needs time to propagate.
3. Redeploy
• Sometimes Vercel doesn’t serve the new primary domain until a fresh build runs.
• A vercel --prod (or API trigger) redeploy is the cleanest way to sync environment variables + domain change.
